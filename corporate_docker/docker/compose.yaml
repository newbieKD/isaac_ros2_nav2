name: ros2-h1-ws

x-common: &common
    environment:
      # Set X11 server environment variable for existing display.
      - DISPLAY=$DISPLAY
      # References:
      # - https://docs.ros.org/en/humble/Concepts/Intermediate/About-Domain-ID.html
      # - https://docs.ros.org/en/humble/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.html
      # - https://docs.ros.org/en/humble/Tutorials/Demos/Logging-and-logger-configuration.html#console-output-colorizing
      - ROS_LOCALHOST_ONLY=0
        # Localhost only is disabled by default to allow communication with external devices.
      - ROS_DOMAIN_ID=0
        # Domain ID is set to 0 to allow communication through ros1_bridge.
      - RCUTILS_COLORIZED_OUTPUT=1
      # TODO: Set the ROS middleware (RMW). Currently supported RMW implementations:
      # - rmw_fastrtps_cpp (FastDDS) (default)
      # - rmw_cyclonedds_cpp (CycloneDDS)
      # Ref:
      # - https://github.com/ros2/rmw_fastrtps/blob/d98cacec980df18810af232b75db80b5ce7da845/README.md
      # - https://github.com/ros2/rmw_cyclonedds/blob/406277084be4352fa48357047ed56be69e4942e5/README.md
      - RMW_IMPLEMENTATION=rmw_fastrtps_cpp
      # Set the ROS workspace path.
      - ROS2_WS=/home/ros2-essentials/h1_ws
      # TODO: Add more environment variables here.
    # Enable GPU support.
    # Reference: https://docs.docker.com/compose/gpu-support/
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]
    # Enable NVIDIA runtime (recommended but optional).
    # Reference: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/sample-workload.html
    runtime: nvidia
    volumes:
      # Mount local timezone into container.
      # Reference: https://stackoverflow.com/questions/57607381/how-do-i-change-timezone-in-a-docker-container
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # Mount X11 server
      - /tmp/.X11-unix:/tmp/.X11-unix
        # X11-unix is mounted to allow GUI applications to display on host.
      # NOTE: Xauthority mount commented out to prevent conflicts with user-based VNC
      # - $HOME/.Xauthority:/home/user/.Xauthority
        # Xauthority would be mounted to allow X11 forwarding, but conflicts with user-based VNC
      # Mount Direct Rendering Infrastructure (DRI) for hardware acceleration support such as OpenGL.
      - /dev/dri:/dev/dri
      # Mount sound card to prevent Gazebo warning.
      - /dev/snd:/dev/snd
      # Mount shared memory for ROS2 communication.
      - /dev/shm:/dev/shm
      # TODO: Uncomment the line below and comment out the three entries above to enable USB support.
      # - /dev:/dev
      # Mount Gazebo models directory to reuse models downloaded during first launch.
      # Reference: https://answers.ros.org/question/365658
      # Note that this volume is shared among all workspaces.
      # - gazebo-cache:/home/user/.gazebo
      # Mount CycloneDDS configuration file.
      - ./cyclonedds.xml:/home/user/cyclonedds.xml
      # Mount Isaac Sim cache directories.
      # Reference: https://docs.omniverse.nvidia.com/isaacsim/latest/installation/install_container.html#container-deployment
      # Note that this volume is shared among all workspaces.
      # - type: volume
      #   source: isaac-sim-cache
      #   target: /isaac-sim/kit/cache
      #   volume:
      #     subpath: cache/kit
      # - type: volume
      #   source: isaac-sim-cache
      #   target: /home/user/.cache/ov
      #   volume:
      #     subpath: cache/ov
      # - type: volume
      #   source: isaac-sim-cache
      #   target: /home/user/.local/lib/python3.10/site-packages/omni/cache  # For Isaac Sim standalone
      #   volume:
      #     subpath: standalone/cache/ov
      # - type: volume
      #   source: isaac-sim-cache
      #   target: /home/user/.cache/pip
      #   volume:
      #     subpath: cache/pip
      # - type: volume
      #   source: isaac-sim-cache
      #   target: /home/user/.cache/nvidia/GLCache
      #   volume:
      #     subpath: cache/glcache
      # - type: volume
      #   source: isaac-sim-cache
      #   target: /home/user/.nv/ComputeCache
      #   volume:
      #     subpath: cache/computecache
      # - type: volume
      #   source: isaac-sim-cache
      #   target: /home/user/.nvidia-omniverse/logs
      #   volume:
      #     subpath: logs
      # - type: volume
      #   source: isaac-sim-cache
      #   target: /home/user/.local/lib/python3.10/site-packages/omni/logs  # For Isaac Sim standalone
      #   volume:
      #     subpath: standalone/logs
      # - type: volume
      #   source: isaac-sim-cache
      #   target: /home/user/.local/share/ov/data
      #   volume:
      #     subpath: data
      # - type: volume
      #   source: isaac-sim-cache
      #   target: /home/user/.local/lib/python3.10/site-packages/omni/data  # For Isaac Sim standalone
      #   volume:
      #     subpath: standalone/data
      # - type: volume
      #   source: isaac-sim-cache
      #   target: /home/user/Documents
      #   volume:
      #     subpath: documents
      # TODO: Add more volume mounts here.
      # Mount root workspace to allow easy access to all workspaces.
      - ../..:/home/ros2-essentials
      # - ../../isaac-sim/cache/kit:/home/user/isaacsim/kit/cache:rw
      # - ../../isaac-sim/cache/ov:/home/user/.cache/ov:rw
      # - ../../isaac-sim/cache/pip:/home/user/.cache/pip:rw
      # - ../../isaac-sim/cache/glcache:/home/user/.cache/nvidia/GLCache:rw
      # - ../../isaac-sim/cache/computecache:/home/user/.nv/ComputeCache:rw
      # - ../../isaac-sim/logs:/home/user/.nvidia-omniverse/logs:rw
      # - ../../isaac-sim/data:/home/user/.local/share/ov/data:rw
      # - ../../isaac-sim/documents:/home/user/Documents:rw
      # - ../../IsaacLab/logs:/home/user/IsaacLab/logs:rw
      # - ../../usd_file:/home/user/.cache/usd_file:rw
      # - ../../IsaacLab/scripts:/home/user/IsaacLab/scripts:rw
      # - ../../IsaacLab/source:/home/user/IsaacLab/source:rw
      # - ../../humble_ws:/home/user/humble_ws:rw
      # - ../../Isaac_sim_other_resource:/home/user/isaacsim/Isaac_sim_other_resource:rw
      # - ../../overrides/isaac_sim_examples/humanoid_example.py:/home/user/isaacsim/exts/isaacsim.examples.interactive/isaacsim/examples/interactive/humanoid/humanoid_example.py:rw
      # - ../../overrides/isaac_sim_examples/h1.py:/home/user/isaacsim/exts/isaacsim.robot.policy.examples/isaacsim/robot/policy/examples/robots/h1.py:rw
# volumes:
#   gazebo-cache:
#     name: ros2-gazebo-cache
#     external: true
#   isaac-sim-cache:
#     name: ros2-isaac-sim-cache
#     external: true

# Add new service need change
#  - ISAAC_SIM_VERSION 
#  - ISAAC_LAB_VERSION
#  - env_version
#  - image
#  - container_name
#  - profiles
#  - services name, ex env320, env500

services:
  # volume-instantiation:
  #   # Ref: https://github.com/moby/moby/issues/47842#issuecomment-2249050939
  #   image: ubuntu:22.04
  #   container_name: ros2-h1-ws-volume-instantiation
  #   command: bash -c "
  #       echo 'Creating directories and setting ownership for UID ${USER_UID:-1000}...' &&
  #       mkdir -p /isaac-sim/cache/{kit,ov,pip,glcache,computecache} &&
  #       mkdir -p /isaac-sim/{logs,data,documents} &&
  #       mkdir -p /isaac-sim/standalone/cache/ov &&
  #       mkdir -p /isaac-sim/standalone/{logs,data} &&
  #       chown ${USER_UID:-1000}:${USER_UID:-1000} /isaac-sim &&
  #       chown ${USER_UID:-1000}:${USER_UID:-1000} /isaac-sim/cache &&
  #       chown ${USER_UID:-1000}:${USER_UID:-1000} /isaac-sim/cache/{kit,ov,pip,glcache,computecache} &&
  #       chown ${USER_UID:-1000}:${USER_UID:-1000} /isaac-sim/{logs,data,documents} &&
  #       chown ${USER_UID:-1000}:${USER_UID:-1000} /isaac-sim/standalone &&
  #       chown ${USER_UID:-1000}:${USER_UID:-1000} /isaac-sim/standalone/cache &&
  #       chown ${USER_UID:-1000}:${USER_UID:-1000} /isaac-sim/standalone/cache/ov &&
  #       chown ${USER_UID:-1000}:${USER_UID:-1000} /isaac-sim/standalone/{logs,data}
  #       "
  #   volumes:
  #     - isaac-sim-cache:/isaac-sim
  env320:
    # depends_on:
    #   - volume-instantiation
    <<: *common
    build:
      context: .
      dockerfile: Dockerfile
      # TODO: Specify the target platform to build the image, otherwise it will build for the host platform.
      # Reference: https://docs.docker.com/compose/compose-file/build/#platforms
      # platforms:
      #   - "linux/arm64"
      args:
        # TODO: Set the USER_UID
        USER_UID: "${USER_UID:-1000}"
        ISAAC_SIM_VERSION: "4.5.0"
        ISAAC_LAB_VERSION: "2.1.0"
        env_version: "3.2.0"
        # TODO: Set CUDA Toolkit version or set to "" if not using CUDA Toolkit
        # CUDA_TOOLKIT_VERSION: ""
        # TODO: Set Isaac Sim version or set to "" if not using Isaac Sim
        # ISAAC_SIM_VERSION: "4.5.0"
        # TODO: Set Isaac Lab version or set to "" if not using Isaac Lab
        # ISAAC_LAB_VERSION: "2.1.0"
        # TODO: Set Isaac ROS to "" if not using Isaac ROS
        # ISAAC_ROS: "YES"
      # cache_from:
      #   - j3soon/ros2-h1-ws:buildcache-amd64
      #   - j3soon/ros2-h1-ws:buildcache-arm64
    image: ghcr.io/newbiekd/isaac_ros2_nav2:3.2.0
    container_name: isaac-workspace-3.2.0
    stdin_open: true
    tty: true
    # TODO: Comment the line below if the workspace don't need to communicate through `/dev/*` devices.
    privileged: true
    command: /bin/bash
    network_mode: host
    working_dir: /home/ros2-essentials/h1_ws
    
    profiles: ["env_320"]
    

  env500:
    # depends_on:
    #   - volume-instantiation
    <<: *common
    build:
      context: .
      dockerfile: Dockerfile
      # TODO: Specify the target platform to build the image, otherwise it will build for the host platform.
      # Reference: https://docs.docker.com/compose/compose-file/build/#platforms
      # platforms:
      #   - "linux/arm64"
      args:
        # TODO: Set the USER_UID
        USER_UID: "${USER_UID:-1000}"
        ISAAC_SIM_VERSION: "5.0.0"
        ISAAC_LAB_VERSION: "2.2.0"
        env_version: "5.0.0"
        # TODO: Set CUDA Toolkit version or set to "" if not using CUDA Toolkit
        # CUDA_TOOLKIT_VERSION: ""
        # TODO: Set Isaac ROS to "" if not using Isaac ROS
        # ISAAC_ROS: "YES"
    image: ghcr.io/newbiekd/isaac_ros2_nav2:5.0.0
    container_name: isaac-workspace-5.0.0
    stdin_open: true
    tty: true
    # TODO: Comment the line below if the workspace don't need to communicate through `/dev/*` devices.
    privileged: true
    command: /bin/bash
    network_mode: host
    working_dir: /home/ros2-essentials/h1_ws
    
    profiles: ["env_500"]
    